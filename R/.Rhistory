library(tidyverse)
source("~/Dropbox/IFPR/ensino/documentos/dependencias/script.R", echo=TRUE)
glimpse(df)
library(tidyverse)
df = readr::read_csv(file = '/home/flaviano/Dropbox/IFPR/ensino/documentos/dependencias/dependencias.csv')
df = readr::read_csv(file = '/home/flaviano/Dropbox/IFPR/ensino/documentos/dependencias/dependencias.csv')
View(df)
df = readr::read_csv(file = '/home/flaviano/Dropbox/IFPR/ensino/documentos/dependencias/dependencias.csv')
View(df)
glimpse(df)
df = df %>%
arrange(docente, turma) %>%
filter(docente == "Flaviano") %>%
select(curso, turma, aluno, dependencia, docente)
glimpse(df)
#glimpse(df)
head(df)
source("~/Dropbox/IFPR/ensino/documentos/dependencias/script.R", echo=TRUE)
library(tidyverse)
pi >%> cos()
cos() %>% pi
pi
cos() %>% 3.14
3.14 %>% cos()
pi %>% cos()
x = 2 %>%
y = 3 %>%
x+Y
x = 2 %>%
y = 3 %>%
x+Y
x <- 2 %>%
y <- 3 %>%
x+Y
x+y %>%
x = 1 %>%
y = 1
x+y %>%
x = 1 %>%
y = 1
x+y %>%
x == 1 %>%
y == 1
x == 1 %>% y == 1 %>% x+y
x = 1 %>% y = 1 %>% x+y
x+y
x+1 %>% x = 1
x+1 %>% x = 1
source("~/Documentos/GitHub/education/courses/graduation/waves/img/R/wave_mhs.R", echo=TRUE)
source("~/Documentos/GitHub/education/courses/graduation/waves/img/R/wave_mhs.R", echo=TRUE)
source("~/Documentos/GitHub/education/courses/graduation/waves/img/R/pulso.R", echo=TRUE)
library(tidyverse)
ggplot(data = diamonds)
ggplot(data = diamonds)+
geom_bar(mapping = aes(x = cut))
head(diamonds)
diamonds %>%
count(cut)
ggplot(data = diamonds)+
geom_histogram(mapping = aes(x = carat))
ggplot(data = diamonds)+
geom_histogram(mapping = aes(x = carat), binwidth = 0.5)
head(diamonds)
diamonds %>%
count(cut_width(carat, 0.5))
smaller = diamonds %>%
filter(carat < 3)
head(diamonds)
ggplot(data = smaller, mapping = aes(x = carat, colour = cut))
ggplot(data = smaller, mapping = aes(x = carat, colour = cut))+
geom_freqpoly()
ggplot(data = smaller, mapping = aes(x = carat, colour = cut))+
geom_freqpoly(binwidth=0.1)
ggplot(data = diamonds, mapping = aes(x = cut, y = price))+
geom_boxplot()
head(mpg)
ggplot(data = mpg)+
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median)), y = hwy)
ggplot(data = mpg)+
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y =hwy))
ggplot(data = mpg)+
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y =hwy))+
coord_flip()
ggplot(data = mpg)+
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y =hwy))+
coord_flip()+
ylab("y")
ggplot(data = mpg)+
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y =hwy))+
coord_flip()+
xlab("x")
ggplot(data = mpg)+
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y =hwy))+
coord_flip()+
xlab("x")+
facet_grid(class ~ hwy)
ggplot(data = mpg)+
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y =hwy))+
coord_flip()+
xlab("x")
ggplot(data = mpg)+
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y =hwy))+
coord_flip()+
xlab("x")+
facet_wrap(~ class)
ggplot(data = mpg)+
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y =hwy))+
coord_flip()+
xlab("x")+
facet_wrap(~ class, scales = "free")
ggplot(data = mpg)+
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y =hwy))+
xlab("x")+
facet_wrap(~ class, scales = "free")
ggplot(data = mpg)+
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y =hwy))+
xlab("x")+
facet_grid(class ~ hwy, scales = "free")
ggplot(data = mpg)+
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y =hwy))+
xlab("x")+
facet_wrap(~ class, scales = "free")
?facet_wrap
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut))
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut))+
geom_tile()
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut))+
geom_tile(mapping = aes(fill = n))
head(flight)
head(flights)
library(flights)
flight
?flight
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x =cut, y = color))+
geom_tile(mapping = aes(fill = n))
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x =color, y = cut))+
geom_tile(mapping = aes(fill = n))
diamonds %>%
ggplot(mapping = aes(x = carat, y = price))
diamonds %>%
ggplot(mapping = aes(x = carat, y = price))+
geom_bin2d()
diamonds %>%
ggplot(mapping = aes(x = carat, y = price))+
geom_hex()
ggplot(data = diamonds, mapping = aes(x = carat, y = price))
ggplot(data = diamonds, mapping = aes(x = carat, y = price))+
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)))
diamonds %>%
filter(carat < 3) %>%
ggplot(data = diamonds, mapping = aes(x = carat, y = price))+
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)))
diamonds %>%
filter(carat < 3) %>%
ggplot(mapping = aes(x = carat, y = price))+
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)))
setwd(pwd)
setwd(system("pwd"))
system("pwd")
setwd(as.character(system("pwd")))
path = system("pwd")
path
system("pwd")
system2("pwd")
system("pwd")
path = system("pwd")
path <- system("pwd")
path = system("pwd")
path = system("pwd")
path = system("pwd",intern = TRUE)
setwd(system("pwd",intern = TRUE))
getwd()
source("~/Documentos/GitHub/analysis/R/regressao_linear.R", echo=TRUE)
source("~/Documentos/GitHub/analysis/R/regressao_linear.R", echo=TRUE)
regressao = lm(y~x, data = df)
stats_df = summary(regressao)$coefficients
summary(regressao)
source("~/Documentos/GitHub/analysis/R/regressao_linear.R", echo=TRUE)
source("~/Documentos/GitHub/analysis/R/regressao_linear.R", echo=TRUE)
p = ggplot(data = df, aes(x, y))+
geom_point(size = 3, aes(color="Dados"))+
#geom_smooth(method = "lm", se = FALSE, aes(color="y=Ax+B"))+
geom_abline(intercept = B, slope = A, aes(color = "y=Ax+B"))+
annotate("text", x=30, y=15, label=sprintf("Coeficiente de atrito: %1.2f", A))+
scale_color_manual(name="Cores", breaks = c("Dados", "y=Ax+B"), values = c("black", "red"))
p = ggplot(data = df, aes(x, y))+
geom_point(size = 3, aes(color="Dados"))+
#geom_smooth(method = "lm", se = FALSE, aes(color="y=Ax+B"))+
geom_abline(intercept = B, slope = A, mapping = aes(color = "y=Ax+B"))+
annotate("text", x=30, y=15, label=sprintf("Coeficiente de atrito: %1.2f", A))+
scale_color_manual(name="Cores", breaks = c("Dados", "y=Ax+B"), values = c("black", "red"))
source("~/Documentos/GitHub/analysis/R/regressao_linear.R", echo=TRUE)
p = ggplot(data = df, aes(x, y))+
geom_point(size = 3, aes(color="Dados"))+
#geom_smooth(method = "lm", se = FALSE, aes(color="y=Ax+B"))+
geom_abline(intercept = B, slope = A, mapping = aes(color = "y=Ax+B"))+
annotate("text", x=30, y=15, label=sprintf("Coeficiente de atrito: %1.2f", A))
source("~/Documentos/GitHub/analysis/R/regressao_linear.R", echo=TRUE)
p = ggplot(data = df, aes(x, y))+
geom_point(size = 3)+
geom_abline(intercept = B, slope = A)+
annotate("text", x=30, y=15, label=sprintf("Coeficiente de atrito: %1.2f", A))+
scale_color_manual(name="Cores", breaks = c("Dados", "y=Ax+B"), values = c("black", "red"))
source("~/Documentos/GitHub/analysis/R/regressao_linear.R", echo=TRUE)
p = ggplot(data = df, aes(x, y))+
geom_point(size = 3)+
geom_abline(intercept = B, slope = A, color = "red")+
annotate("text", x=30, y=15, label=sprintf("Coeficiente de atrito: %1.2f", A))
p = ggplot(data = df, aes(x, y))+
geom_point(size = 3)+
geom_abline(intercept = B, slope = A, colour = "red")+
annotate("text", x=30, y=15, label=sprintf("Coeficiente de atrito: %1.2f", A))
p = ggplot(data = df, aes(x, y))+
geom_point(size = 3)+
geom_abline(intercept = B, slope = A, colour = "red")+
annotate("text", label=sprintf("Coeficiente de atrito: %1.2f", A))
p = ggplot(data = df, aes(x, y))+
geom_point(size = 3)+
geom_abline(intercept = B, slope = A, colour = "red")+
annotate("text", label=sprintf("Coeficiente de atrito: %1.2f", A))
ggplotly(p)
p = ggplot(data = df, aes(x, y))+
geom_point(size = 3)+
geom_abline(intercept = B, slope = A, colour = "red")+
annotate("text", x=0.75*xlim, y = 0.5*ylim, label=sprintf("Coeficiente de atrito: %1.2f", A))
p = ggplot(data = df, aes(x, y))+
geom_point(size = 3)+
geom_abline(intercept = B, slope = A, colour = "red")+
annotate("text", x=0.75*(max(x)-min(x)), y = 0.5*(max(y)-min(y)), label=sprintf("Coeficiente de atrito: %1.2f", A))
ggplotly(p)
p = ggplot(data = df, aes(x, y))+
geom_point(size = 3)+
geom_abline(intercept = B, slope = A, colour = "red")+
annotate("text", x=0.9*(max(x)-min(x)), y = 0.5*(max(y)-min(y)), label=sprintf("Coeficiente de atrito: %1.2f", A))
ggplotly(p)
p = ggplot(data = df, aes(x, y))+
geom_point(size = 3)+
geom_abline(intercept = B, slope = A, colour = "red")+
annotate("text", x=0.95*max(x), y = 0.5*(max(y)-min(y)), label=sprintf("Coeficiente de atrito: %1.2f", A))
ggplotly(p)
p = ggplot(data = df, aes(x, y))+
geom_point(size = 3)+
geom_abline(intercept = B, slope = A, colour = "red")+
annotate("text", x=0.75*max(x), y = 0.5*(max(y)-min(y)), label=sprintf("Coeficiente de atrito: %1.2f", A))
ggplotly(p)
p = ggplot(data = df, aes(x, y))+
geom_point(size = 3)+
geom_abline(intercept = B, slope = A, colour = "red")+
annotate("text", x=0.75*max(x), y = 0.25*max(y), label=sprintf("Coeficiente de atrito: %1.2f", A))
ggplotly(p)
p = ggplot(data = df, aes(x, y))+
geom_point(size = 3)+
geom_abline(intercept = B, slope = A, colour = "red")+
annotate("text", x=0.75*max(x), y = 0.5*max(y), label=sprintf("Coeficiente de atrito: %1.2f", A))
ggplotly(p)
p = ggplot(data = df, aes(x, y))+
geom_point(size = 3)+
geom_abline(intercept = B, slope = A, colour = "red")+
annotate("text", x=0.75*max(x), y = 0.3*max(y), label=sprintf("Coeficiente de atrito: %1.2f", A))
ggplotly(p)
p = ggplot(data = df, aes(x, y))+
geom_point(size = 3)+
geom_abline(intercept = B, slope = A, colour = "red")+
annotate("text", x=0.75*max(x), y = 0.4*max(y), label=sprintf("Coeficiente de atrito: %1.2f", A))
ggplotly(p)
source("~/Documentos/GitHub/analysis/R/regressao_linear.R", echo=TRUE)
source("~/Documentos/GitHub/analysis/R/regressao_linear.R", echo=TRUE)
shiny::runApp('Documentos/GitHub/analysis/R')
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
